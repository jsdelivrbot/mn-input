html
  meta(name='viewport' content='width=device-width, user-scalable=no')

  block styles
    link(rel='stylesheet' href='docs/vendor.css')
    link(rel='stylesheet' href='dist/mn-input.css')

  style.
    mn-input {
      font-size: 1.2rem;
    }

    form {width: 100%}

    @media (min-width: 600px) {
      form {
        padding: 100px;
        box-sizing: border-box;
      }
    }
body
  h2 mn-input
  include github-corner

  .mn-layout-fullscreen.mn-layout-centered
    .mn-layout-container
      mn-form.mn-layout-column.mn-layout-sm-row
        mn-input.flex#username(placeholder='username')
        mn-input.flex#firstname(placeholder='firtname')
        mn-input.flex#lastname(placeholder='lastname')
        //- button submit

  .docs.mn-layout-container
    mn-code.sh.
      npm install --save mn-input

    p And bundle dependencies and main files in <strong>dist/</strong> with your preferred tool.

    h3 usage
    p in your html, you can use the tag <strong class="tag">mn-input</strong> i.e.
    mn-code.html.
      <mn-input placeholder="Username"></mn-input>

    p Other attributes are supported, like <em>placeholder</em>, <em>value</em>, <em>name</em>, <em>autofocus</em>, <em>maxlength</em>, <em>pattern</em>, <em>readonly</em>, <em>required</em>, <em>disabled</em>, and <em>autocapitalize</em>

    h3 types
    p if you need another type of input, like password, or number, see other mn-components like <strong class="tag">mn-password</strong>, or <strong class="tag">mn-number</strong>.
    p they are in separated, to produce a clean code, and detailed care about UX.


  block scripts
    script(src='docs/vendor.js')
    script(src='dist/mn-input.js')
    //- script.
      var form = document.querySelector('mn-form')
      form.onSubmit = function() {
        console.log('submit')
      }
