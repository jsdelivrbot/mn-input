{"version":3,"sources":["scripts/mn-input.class.js"],"names":["MnInput","self","notImplemented","defaultAttr","attributes","some","attribute","name","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","hasOwnProperty","attributeValue","value","isValidValue","values","indexOf","default","input","_this","_ret","_classCallCheck","this","classList","add","getAttribute","undefined","remove","document","createElement","addEventListener","closest","validate","Array","from","map","attr","defaultAttibutes","concat","forEach","removeAttribute","insertBefore","firstChild","_possibleConstructorReturn","querySelector","focus","blur","objectValues","obj","array","key","push","patternMismatch","RegExp","test","hasValue","rangeOverflow","Number","rangeUnderflow","errors","required","validity","valueMissing","pattern","Object","invalid","cssClass","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n\n    // set style\n    this.classList.add('mn-input')\n    const value = this.getAttribute('value')\n    const hasValue = value !== null\n      &&  value !== undefined\n      && value !== ''\n\n    hasValue\n      ? this.classList.add('has-value')\n      : this.classList.remove('has-value')\n\n    // // empty element\n    // this.innerHTML = ''\n\n    // set input\n    const attributeSpecs = [\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'autocapitalize',\n      },\n    ]\n\n    const input = document.createElement('input')\n    input.addEventListener('focus', () => this.classList.add('focused'))\n    input.addEventListener('keyup', () => {\n      if (this.closest('form.submitted')) {\n        this.validate()\n      }\n    })\n    input.addEventListener('blur', () => this.classList.remove('focused'))\n    input.addEventListener('change', () => {\n      if (input.value) {\n        this.classList.add('has-value')\n      } else {\n        this.classList.remove('has-value')\n      }\n\n      if (this.closest('form.submitted')) {\n        this.validate()\n      }\n    })\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(attr => {\n        const name = attr.name\n        const value = attr.value\n        return {name, value}\n      })\n\n    let defaultAttibutes = attributeSpecs\n      .filter(attr => attr.hasOwnProperty('default'))\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    this.insertBefore(input, this.firstChild)\n\n    return self\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n\n  set value(value) {\n    const input = this.querySelector('input')\n    const hasValue = value !== null &&  value !== undefined && value !== ''\n    if (hasValue) {\n      if (input.value !== value) {\n        input.value = value\n      }\n    } else {\n      input.value = ''\n    }\n\n    if (input.value !== value && this.closest('form.submitted')) {\n      this.validate()\n    }\n  }\n\n  get value() {\n    const input = this.querySelector('input')\n    return input.value\n  }\n\n  focus() {\n    this.querySelector('input').focus()\n    this.classList.add('focused')\n  }\n\n  blur() {\n    this.querySelector('input').blur()\n    this.classList.remove('focused')\n  }\n\n  validate() {\n    const input = this.querySelector('input')\n\n    if (input) {\n      const patternMismatch = !RegExp(this.getAttribute('pattern') || '').test(input.value)\n      const hasValue = this.value !== ''\n      const rangeOverflow = this.getAttribute('max')\n        ? hasValue && this.value > Number(this.getAttribute('max'))\n        : false\n\n      const rangeUnderflow = this.getAttribute('min')\n        ? hasValue && this.value < Number(this.getAttribute('min'))\n        : false\n\n      // const stepMismatch = this.getAttribute('step')\n      //   ? hasValue && (this.value % Number(this.getAttribute('step'))) !== 0\n      //   : false\n\n      const errors = {\n        required: input.validity.valueMissing,\n        pattern: patternMismatch,\n        rangeOverflow,\n        rangeUnderflow,\n        // stepMismatch,\n      }\n\n      Object.values = Object.values\n        ? Object.values\n        : objectValues\n\n      function objectValues(obj) {\n        const array = []\n        for (const key in obj) {\n          array.push(obj[key])\n        }\n        return array\n      }\n\n      errors.invalid = Object.values(errors).some(value => value)\n\n      for (const key in errors) {\n        const cssClass = key\n        const invalid = errors[key]\n\n        invalid\n          ? this.classList.add(cssClass)\n          : this.classList.remove(cssClass)\n      }\n    }\n  }\n}\n\nwindow.customElements.define('mn-input', MnInput)\nwindow.MnInput = MnInput\n"]}