{"version":3,"sources":["scripts/mn-input.class.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","setInput","classList","add","getAttribute","remove","_possibleConstructorReturn","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","_this2","document","createElement","addEventListener","focus","blur","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","insertBefore","firstChild","querySelector","HTMLElement","window","customElements","define"],"mappings":"sxCAAMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAShB,OATgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,WAGLJ,MAAKK,UAAUC,IAAI,YACnBN,MAAKO,aAAa,SACdP,MAAKK,UAAUC,IAAI,aACnBN,MAAKK,UAAUG,OAAO,aAC1BP,KAAOF,KAAPU,2BAAAT,MAAAC,oGAwEA,QAASS,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASS,cAAaN,WACpB,GAAIO,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKb,OAASG,UAAUH,OAAM,EAChF,KAAKU,cACH,OAAO,CAET,IAAII,oBAAqBJ,cAAcN,eAAe,WAClDW,eAAiBZ,UAAUF,KAE/B,IAAIa,mBAAoB,CACtB,GAAIE,cAAeN,cAAcN,eAAe,WAC3CM,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDd,MAAQe,aACRD,eACAL,cAAcS,OAElBC,OAAMX,aAAaN,UAAUH,KAAMC,WAC1Bc,iBACTK,MAAMX,aAAaN,UAAUH,KAAMe,gBArG9B,GAAAM,QAAA9B,KACHoB,iBAEFX,KAAM,OACNmB,QAAS,OACTF,QACE,OACA,WACA,WAIFjB,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNmB,QAAS,QAGTnB,KAAM,cAMNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAOJoB,MAAQE,SAASC,cAAc,QACrCH,OAAMI,iBAAiB,QAAS,WAAA,MAAMH,QAAKI,UAC3CL,MAAMI,iBAAiB,OAAQ,WAAA,MAAMH,QAAKK,SAC1CN,MAAMI,iBAAiB,SAAU,WAAA,MAAMH,QAAKpB,MAAQmB,MAAMnB,OAE1D,IAAIM,YAAaoB,MACdC,KAAKrC,KAAKgB,YACVsB,IAAI/B,iBAEHgC,iBAAmBnB,eACpBC,OAAOV,UACPU,OAAOP,eAEVE,YAAaA,WAAWwB,OAAOD,kBAE/BvB,WAAWyB,QAAQvB,cAEnBE,eACGC,OAAO,SAAAb,MAAA,MAAQA,MAAKH,SACpBoC,QAAQ,SAAAjC,MACPsB,OAAKY,gBAAgBlC,KAAKC,QAG9BT,KAAK2C,aAAad,MAAO7B,KAAK4C,4CA2D9B5C,KAAKE,UAAUC,IAAI,wCAInBH,KAAKE,UAAUG,OAAO,qCAxBdK,OACR,GAAMmB,OAAQ7B,KAAK6C,cAAc,QAE7BnC,QACEmB,MAAMnB,QAAUA,QAClBmB,MAAMnB,MAAQA,OAEhBV,KAAKE,UAAUC,IAAI,eAEnB0B,MAAMnB,MAAQ,GACdV,KAAKE,UAAUG,OAAO,8BAKxB,GAAMwB,OAAQ7B,KAAK6C,cAAc,QACjC,OAAOhB,OAAMnB,mBAvIKoC,YAmJtBC,QAAOC,eAAeC,OAAO,WAAYtD","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    this.setInput()\n\n    // set style\n    this.classList.add('mn-input')\n    this.getAttribute('value')\n      ? this.classList.add('has-value')\n      : this.classList.remove('has-value')\n    return self\n  }\n\n  setInput() {\n    const attributeSpecs = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      // {\n      //   name: 'maxlength',\n      // },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      // {\n      //   name: 'autocapitalize',\n      // },\n    ]\n\n    const input = document.createElement('input')\n    input.addEventListener('focus', () => this.focus())\n    input.addEventListener('blur', () => this.blur())\n    input.addEventListener('change', () => this.value = input.value)\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    this.insertBefore(input, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n\n  set value(value) {\n    const input = this.querySelector('input')\n\n    if (value) {\n      if (input.value !== value) {\n        input.value = value\n      }\n      this.classList.add('has-value')\n    } else {\n      input.value = ''\n      this.classList.remove('has-value')\n    }\n  }\n\n  get value() {\n    const input = this.querySelector('input')\n    return input.value\n  }\n\n  focus() {\n    this.classList.add('focus')\n  }\n\n  blur() {\n    this.classList.remove('focus')\n  }\n}\n\nwindow.customElements.define('mn-input', MnInput)\n"]}