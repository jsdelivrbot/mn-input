{"version":3,"sources":["scripts/mn-input.component.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","setPlaceholder","setInput","_possibleConstructorReturn","placeholder","getAttribute","label","document","createElement","textContent","insertBefore","firstChild","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","component","name","isValidValue","values","indexOf","value","default","input","setAttribute","attributes","map","HTMLElement","customElements","define"],"mappings":"AAAA,sxCAEMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAIhB,OAJgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,iBACLJ,MAAKK,WACLJ,KAAOF,KAAPO,2BAAAN,MAAAC,0GAIA,GAAIM,aAAcJ,KAAKK,aAAa,cAEpC,IAAID,YAAa,CACf,GAAIE,OAAQC,SAASC,cAAc,QACnCF,OAAMG,YAAcT,KAAKK,aAAa,YAC/BD,YADa,YAEhBA,YAEJJ,KAAKU,aAAaJ,MAAON,KAAKW,gDAsDhC,QAASC,mBAAkBC,WACzB,GAAIC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,UAAUZ,aAAaQ,UAAUK,KAEtD,IAAIJ,mBAAoB,CACtB,GAAIK,cAAeN,UAAUE,eAAe,WACvCF,UAAUO,OAAOC,QAAQL,iBAAmB,EAE7CM,MAAQH,aACRH,eACAH,UAAUU,OAEdC,OAAMC,aAAaZ,UAAUK,KAAMI,WAC1BN,iBACTQ,MAAMC,aAAaZ,UAAUK,KAAMF,gBA/DvC,GAAIU,cAEAR,KAAM,OACNK,QAAS,OACTH,QACE,OACA,WACA,WAIFF,KAAM,cACNK,QAAS,cAGTL,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNK,QAAS,QAGTL,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAINM,MAAQjB,SAASC,cAAc,SAC/BS,UAAYjB,IAChB0B,YAAWC,IAAIf,mBACfZ,KAAKU,aAAac,MAAOxB,KAAKW,yBArEZiB,YA2FtBC,gBAAeC,OAAO,WAAYnC","file":"mn-input.js","sourcesContent":["'use strict';\n\nclass MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self);\n    this.setPlaceholder();\n    this.setInput();\n    return self;\n  }\n\n  setPlaceholder() {\n    let placeholder = this.getAttribute('placeholder');\n\n    if (placeholder) {\n      let label = document.createElement('label');\n      label.textContent = this.getAttribute('disabled')\n        ? `${placeholder} disabled`\n        : placeholder;\n\n      this.insertBefore(label, this.firstChild);\n    }\n  }\n\n  setInput() {\n    let attributes = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'placeholder',\n        default: 'undefined',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n    ];\n\n    let input = document.createElement('input');\n    let component = this;\n    attributes.map(setInputAttribute);\n    this.insertBefore(input, this.firstChild);\n\n    function setInputAttribute(attribute) {\n      let isDefaultAttribute = attribute.hasOwnProperty('default');\n      let attributeValue = component.getAttribute(attribute.name);\n\n      if (isDefaultAttribute) {\n        let isValidValue = attribute.hasOwnProperty('values')\n          && attribute.values.indexOf(attributeValue) >= 0;\n\n        let value = isValidValue\n          ? attributeValue\n          : attribute.default;\n\n        input.setAttribute(attribute.name, value);\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue);\n      }\n    }\n  }\n}\n\ncustomElements.define('mn-input', MnInput);\n"],"sourceRoot":"/source/"}