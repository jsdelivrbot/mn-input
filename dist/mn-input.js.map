{"version":3,"sources":["/sources/scripts/mn-input.class.js"],"names":["MnInput","self","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","_this","_ret","_classCallCheck","this","classList","add","getAttribute","remove","document","createElement","addEventListener","closest","validate","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","insertBefore","firstChild","_possibleConstructorReturn","querySelector","focus","blur","objectValues","obj","array","key","push","patternMismatch","RegExp","test","hasValue","rangeOverflow","rangeUnderflow","stepMismatch","errors","required","validity","valueMissing","pattern","Object","invalid","cssClass","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n\n    // set style\n    this.classList.add('mn-input')\n    this.getAttribute('value')\n      ? this.classList.add('has-value')\n      : this.classList.remove('has-value')\n\n    // set input\n    const attributeSpecs = [\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'autocapitalize',\n      },\n    ]\n\n    const input = document.createElement('input')\n    input.addEventListener('focus', () => this.classList.add('focused'))\n    input.addEventListener('keyup', () => {\n      if (this.closest('form.submitted')) {\n        this.validate()\n      }\n    })\n    input.addEventListener('blur', () => this.classList.remove('focused'))\n    input.addEventListener('change', () => this.value = input.value)\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    this.insertBefore(input, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n\n    return self\n  }\n\n  set value(value) {\n    const input = this.querySelector('input')\n\n    if (value) {\n      if (input.value !== value) {\n        input.value = value\n      }\n      this.classList.add('has-value')\n    } else {\n      input.value = ''\n      this.classList.remove('has-value')\n    }\n\n    if (input.value !== value && this.closest('form.submitted')) {\n      this.validate()\n    }\n  }\n\n  get value() {\n    const input = this.querySelector('input')\n    return input.value\n  }\n\n  focus() {\n    this.querySelector('input').focus()\n    this.classList.add('focused')\n  }\n\n  blur() {\n    this.querySelector('input').blur()\n    this.classList.remove('focused')\n  }\n\n  validate() {\n    const input = this.querySelector('input')\n\n    if (input) {\n      const patternMismatch = !RegExp(this.getAttribute('pattern') || '').test(input.value)\n      const hasValue = this.value !== ''\n      const rangeOverflow = this.getAttribute('max')\n        ? hasValue && this.value > this.getAttribute('max')\n        : false\n\n      const rangeUnderflow = this.getAttribute('min')\n        ? hasValue && this.value < this.getAttribute('min')\n        : false\n\n      const stepMismatch = this.getAttribute('step')\n        ? hasValue && (this.value % this.getAttribute('step')) !== 0\n        : false\n\n      const errors = {\n        required: input.validity.valueMissing,\n        pattern: patternMismatch,\n        rangeOverflow,\n        rangeUnderflow,\n        stepMismatch,\n      }\n\n      Object.values = Object.values\n        ? Object.values\n        : objectValues\n\n      function objectValues(obj) {\n        const array = []\n        for (const key in obj) {\n          array.push(obj[key])\n        }\n        return array\n      }\n\n      errors.invalid = Object.values(errors).some(value => value)\n\n      for (const key in errors) {\n        const cssClass = key\n        const invalid = errors[key]\n\n        invalid\n          ? this.classList.add(cssClass)\n          : this.classList.remove(cssClass)\n      }\n    }\n  }\n}\n\nwindow.customElements.define('mn-input', MnInput)\n"]}