{"version":3,"sources":["scripts/mn-input.class.js"],"names":["MnInput","self","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","_this","_ret","_classCallCheck","this","classList","add","getAttribute","remove","document","createElement","addEventListener","validate","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","insertBefore","firstChild","_possibleConstructorReturn","querySelector","focus","blur","closest","console","log","patternMismatch","RegExp","test","errors","pattern","required","validity","valueMissing","invalid","Object","entries","validation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_step$value","_slicedToArray","cssClass","err","return","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n\n    // set style\n    this.classList.add('mn-input')\n    this.getAttribute('value')\n      ? this.classList.add('has-value')\n      : this.classList.remove('has-value')\n\n    // set input\n    const attributeSpecs = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      // {\n      //   name: 'maxlength',\n      // },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      // {\n      //   name: 'autocapitalize',\n      // },\n    ]\n\n    const input = document.createElement('input')\n    input.addEventListener('focus', () => this.classList.add('focus'))\n    input.addEventListener('keyup', () => this.validate())\n    input.addEventListener('blur', () => this.classList.remove('focus'))\n    input.addEventListener('change', () => this.value = input.value)\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    this.insertBefore(input, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n\n    return self\n  }\n\n  set value(value) {\n    const input = this.querySelector('input')\n\n    if (value) {\n      if (input.value !== value) {\n        input.value = value\n      }\n      this.classList.add('has-value')\n    } else {\n      input.value = ''\n      this.classList.remove('has-value')\n    }\n\n    if (input.value !== value) {\n      this.validate()\n    }\n  }\n\n  get value() {\n    const input = this.querySelector('input')\n    return input.value\n  }\n\n  focus() {\n    this.querySelector('input').focus()\n  }\n\n  blur() {\n    this.querySelector('input').blur()\n  }\n\n  validate() {\n    if (this.closest('form.submitted')) {\n      console.log('validating')\n      const input = this.querySelector('input')\n      const patternMismatch = !RegExp(this.getAttribute('pattern') || '').test(input.value)\n      const errors = {\n        pattern: patternMismatch,\n        required: input.validity.valueMissing,\n      }\n\n      errors.invalid = Object.entries(errors).some(validation => validation[1])\n\n      for (const [cssClass, invalid] of Object.entries(errors)) {\n        invalid\n          ? this.classList.add(cssClass)\n          : this.classList.remove(cssClass)\n      }\n    }\n  }\n}\n\nwindow.customElements.define('mn-input', MnInput)\n"]}