{"version":3,"sources":["scripts/mn-input.class.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","placeholder","document","createElement","id","setAttribute","insertBefore","firstChild","getAttribute","setInput","classList","add","_possibleConstructorReturn","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","_this2","addEventListener","remove","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","isDisabled","label","querySelector","textContent","HTMLElement","window","customElements","define"],"mappings":"sxCAAMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAAAC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,MAEb,IAAMK,aAAcC,SAASC,cAAc,QAa3C,OAZIN,OAAKO,IACPH,YAAYI,aAAa,MAAOR,MAAKO,IAEvCP,MAAKS,aAAaL,YAAaJ,MAAKU,YAChCV,MAAKW,aAAa,iBACpBX,MAAKI,YAAcJ,MAAKW,aAAa,gBAGvCX,MAAKY,WAGLZ,MAAKa,UAAUC,IAAI,YACnBb,KAAOF,KAAPgB,2BAAAf,MAAAC,oGA6EA,QAASe,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASV,cAAaa,WACpB,GAAIM,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKZ,OAASG,UAAUH,OAAM,EAChF,KAAKS,cACH,OAAO,CAET,IAAII,oBAAqBJ,cAAcL,eAAe,WAClDU,eAAiBX,UAAUF,KAE/B,IAAIY,mBAAoB,CACtB,GAAIE,cAAeN,cAAcL,eAAe,WAC3CK,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDb,MAAQc,aACRD,eACAL,cAAcS,OAElBC,OAAM7B,aAAaa,UAAUH,KAAMC,WAC1Ba,iBACTK,MAAM7B,aAAaa,UAAUH,KAAMc,gBA1G9B,GAAAM,QAAAnC,KACHyB,iBAEFV,KAAM,OACNkB,QAAS,OACTF,QACE,OACA,WACA,WAIFhB,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNkB,QAAS,QAGTlB,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,mBAIJmB,MAAQhC,SAASC,cAAc,QACrC+B,OAAME,iBAAiB,OAAQ,WAC7B,GAAMpB,OAAQkB,MAAMlB,KAChBA,OACFkB,MAAMxB,UAAUC,IAAI,aAEpBuB,MAAMxB,UAAU2B,OAAO,cAI3B,IAAIf,YAAagB,MACdC,KAAKvC,KAAKsB,YACVkB,IAAI3B,iBAEH4B,iBAAmBhB,eACpBC,OAAOT,UACPS,OAAON,eAEVE,YAAaA,WAAWoB,OAAOD,kBAE/BnB,WAAWqB,QAAQtC,cAEnBoB,eACGC,OAAO,SAAAZ,MAAA,MAAQA,MAAKuB,SACpBM,QAAQ,SAAA7B,MACPqB,OAAKS,gBAAgB9B,KAAKC,QAG9Bf,KAAKM,aAAa4B,MAAOlC,KAAKO,8CAuChBS,OACd,GAAM6B,YAAa7C,KAAKQ,aAAa,YAC/BsC,MAAQ9C,KAAK+C,cAAc,QACjCD,OAAME,YAAcH,WACb7B,MADa,YAEhBA,MACJhB,KAAKK,aAAa,cAAeW,uBAIjC,MAAOhB,MAAKQ,aAAa,2CAGjBQ,OACR,GAAMkB,OAAQlC,KAAK+C,cAAc,QACjCb,OAAMlB,MAAQA,sBAId,GAAMkB,OAAQlC,KAAK+C,cAAc,QACjC,OAAOb,OAAMlB,mBAvJKiC,YA2JtBC,QAAOC,eAAeC,OAAO,WAAYzD","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    // set placeholder\n    const placeholder = document.createElement('label')\n    if (this.id) {\n      placeholder.setAttribute('for', this.id)\n    }\n    this.insertBefore(placeholder, this.firstChild)\n    if (this.getAttribute('placeholder')) {\n      this.placeholder = this.getAttribute('placeholder')\n    }\n\n    this.setInput()\n\n    // set style\n    this.classList.add('mn-input')\n    return self\n  }\n\n  setInput() {\n    const attributeSpecs = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'autocapitalize',\n      },\n    ]\n\n    const input = document.createElement('input')\n    input.addEventListener('blur', () => {\n      const value = input.value\n      if (value) {\n        input.classList.add('has-value')\n      } else {\n        input.classList.remove('has-value')\n      }\n    })\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue)\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented)\n\n    attributes = attributes.concat(defaultAttibutes)\n\n    attributes.forEach(setAttribute)\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name)\n      })\n\n    this.insertBefore(input, this.firstChild)\n\n    function getNameAndValue(attr) {\n      let name = attr.name\n      let value = attr.value\n      return {name, value}\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default')\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0]\n      if (!attributeSpec) {\n        return false\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default')\n      let attributeValue = attribute.value\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n\n  set placeholder(value) {\n    const isDisabled = this.getAttribute('disabled')\n    const label = this.querySelector('label')\n    label.textContent = isDisabled\n      ? `${value} disabled`\n      : value\n    this.setAttribute('placeholder', value)\n  }\n\n  get placeholder() {\n    return this.getAttribute('placeholder')\n  }\n\n  set value(value) {\n    const input = this.querySelector('input')\n    input.value = value\n  }\n\n  get value() {\n    const input = this.querySelector('input')\n    return input.value\n  }\n}\n\nwindow.customElements.define('mn-input', MnInput)\n"]}