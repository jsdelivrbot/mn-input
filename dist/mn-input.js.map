{"version":3,"sources":["scripts/mn-input.class.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","setPlaceholder","setInput","_possibleConstructorReturn","placeholder","getAttribute","id","label","document","createElement","textContent","setAttribute","insertBefore","firstChild","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","_this2","remove","Array","from","map","defaultAttibutes","concat","forEach","removeAttribute","HTMLElement","customElements","define"],"mappings":"sxCAAMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAIhB,OAJgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,iBACLJ,MAAKK,WACLJ,KAAOF,KAAPO,2BAAAN,MAAAC,0GAIA,GAAIM,aAAcJ,KAAKK,aAAa,eAChCC,GAAKN,KAAKK,aAAa,KAE3B,IAAID,YAAa,CACf,GAAIG,OAAQC,SAASC,cAAc,QACnCF,OAAMG,YAAcV,KAAKK,aAAa,YAC/BD,YADa,YAEhBA,YAEAE,IACFC,MAAMI,aAAa,MAAOL,IAG5BN,KAAKY,aAAaL,MAAOP,KAAKa,gDA8EhC,QAASC,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASL,cAAaQ,WACpB,GAAIM,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKZ,OAASG,UAAUH,OAAM,EAChF,KAAKS,cACH,OAAO,CAET,IAAII,oBAAqBJ,cAAcL,eAAe,WAClDU,eAAiBX,UAAUF,KAE/B,IAAIY,mBAAoB,CACtB,GAAIE,cAAeN,cAAcL,eAAe,WAC3CK,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDb,MAAQc,aACRD,eACAL,cAAcS,OAElBC,OAAMxB,aAAaQ,UAAUH,KAAMC,WAC1Ba,iBACTK,MAAMxB,aAAaQ,UAAUH,KAAMc,gBA1G9B,GAAAM,QAAApC,KACL0B,iBAEAV,KAAM,OACNkB,QAAS,OACTF,QACE,OACA,WACA,WAIFhB,KAAM,cACNkB,QAAS,cAGTlB,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNkB,QAAS,QAGTlB,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,mBAGNA,KAAM,KACNqB,QAAQ,IAIRF,MAAQ3B,SAASC,cAAc,SAE/Bc,WAAae,MACdC,KAAKvC,KAAKuB,YACViB,IAAI1B,iBAEH2B,iBAAmBf,eACpBC,OAAOT,UACPS,OAAON,eAEVE,YAAaA,WAAWmB,OAAOD,kBAE/BlB,WAAWoB,QAAQhC,cAEnBe,eACGC,OAAO,SAAAZ,MAAA,MAAQA,MAAKsB,SACpBM,QAAQ,SAAA5B,MACPqB,OAAKQ,gBAAgB7B,KAAKC,QAG9BhB,KAAKY,aAAauB,MAAOnC,KAAKa,yBAlGZgC,YA0ItBC,gBAAeC,OAAO,WAAYpD","file":"mn-input.js","sourcesContent":["class MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self);\n    this.setPlaceholder();\n    this.setInput();\n    return self;\n  }\n\n  setPlaceholder() {\n    let placeholder = this.getAttribute('placeholder');\n    let id = this.getAttribute('id');\n\n    if (placeholder) {\n      let label = document.createElement('label');\n      label.textContent = this.getAttribute('disabled')\n        ? `${placeholder} disabled`\n        : placeholder;\n\n      if (id) {\n        label.setAttribute('for', id);\n      }\n\n      this.insertBefore(label, this.firstChild);\n    }\n  }\n\n  setInput() {\n    let attributeSpecs = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'placeholder',\n        default: 'undefined',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'autocapitalize',\n      },\n      {\n        name: 'id',\n        remove: true,\n      },\n    ];\n\n    let input = document.createElement('input');\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue);\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented);\n\n    attributes = attributes.concat(defaultAttibutes);\n\n    attributes.forEach(setAttribute);\n\n    attributeSpecs\n      .filter(attr => attr.remove)\n      .forEach(attr => {\n        this.removeAttribute(attr.name);\n      });\n\n    this.insertBefore(input, this.firstChild);\n\n    function getNameAndValue(attr) {\n      let name = attr.name;\n      let value = attr.value;\n      return {name, value};\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default');\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name);\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0];\n      if (!attributeSpec) {\n        return false;\n      }\n      let isDefaultAttribute = attributeSpec.hasOwnProperty('default');\n      let attributeValue = attribute.value;\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0;\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default;\n\n        input.setAttribute(attribute.name, value);\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue);\n      }\n    }\n  }\n}\n\ncustomElements.define('mn-input', MnInput);\n"]}