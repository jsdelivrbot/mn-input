{"version":3,"sources":["scripts/mn-input.component.js"],"names":["MnInput","self","_this","_ret","_classCallCheck","this","setPlaceholder","setInput","_possibleConstructorReturn","placeholder","getAttribute","label","document","createElement","textContent","insertBefore","firstChild","getNameAndValue","attr","name","value","defaults","attribute","hasOwnProperty","notImplemented","defaultAttr","attributes","some","setAttribute","attributeSpec","attributeSpecs","filter","spec","isDefaultAttribute","attributeValue","isValidValue","values","indexOf","default","input","Array","from","map","defaultAttibutes","concat","forEach","HTMLElement","customElements","define"],"mappings":"AAAA,sxCAEMA,QAAAA,SAAAA,cACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAIhB,OAJgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,iBACLJ,MAAKK,WACLJ,KAAOF,KAAPO,2BAAAN,MAAAC,0GAIA,GAAIM,aAAcJ,KAAKK,aAAa,cAEpC,IAAID,YAAa,CACf,GAAIE,OAAQC,SAASC,cAAc,QACnCF,OAAMG,YAAcT,KAAKK,aAAa,YAC/BD,YADa,YAEhBA,YAEJJ,KAAKU,aAAaJ,MAAON,KAAKW,gDAgEhC,QAASC,iBAAgBC,MACvB,GAAIC,MAAOD,KAAKC,KACZC,MAAQF,KAAKE,KACjB,QAAQD,KAAAA,KAAMC,MAAAA,OAGhB,QAASC,UAASC,WAChB,MAAOA,WAAUC,eAAe,WAGlC,QAASC,gBAAeC,aACtB,OAAQC,WAAWC,KAAK,SAAAL,WAAA,MAAaA,WAAUH,OAASM,YAAYN,OAGtE,QAASS,cAAaN,WACpB,GAAIO,eAAgBC,eAAeC,OAAO,SAAAC,MAAA,MAAQA,MAAKb,OAASG,UAAUH,OAAM,GAC5Ec,mBAAqBJ,eAAiBA,cAAcN,eAAe,WACnEW,eAAiBZ,UAAUF,KAE/B,IAAIa,mBAAoB,CACtB,GAAIE,cAAeN,cAAcN,eAAe,WAC3CM,cAAcO,OAAOC,QAAQH,iBAAmB,EAEjDd,MAAQe,aACRD,eACAL,cAAcS,OAElBC,OAAMX,aAAaN,UAAUH,KAAMC,WAC1Bc,iBACTK,MAAMX,aAAaN,UAAUH,KAAMe,gBAxFvC,GAAIJ,kBAEAX,KAAM,OACNmB,QAAS,OACTF,QACE,OACA,WACA,WAIFjB,KAAM,cACNmB,QAAS,cAGTnB,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNmB,QAAS,QAGTnB,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAINoB,MAAQ3B,SAASC,cAAc,SAE/Ba,WAAac,MACdC,KAAKpC,KAAKqB,YACVgB,IAAIzB,iBAEH0B,iBAAmBb,eACpBC,OAAOV,UACPU,OAAOP,eAEVE,YAAaA,WAAWkB,OAAOD,kBAE/BjB,WAAWmB,QAAQjB,cACnBvB,KAAKU,aAAawB,MAAOlC,KAAKW,yBA/EZ8B,YAoHtBC,gBAAeC,OAAO,WAAYhD","file":"mn-input.js","sourcesContent":["'use strict';\n\nclass MnInput extends HTMLElement {\n  constructor(self) {\n    self = super(self);\n    this.setPlaceholder();\n    this.setInput();\n    return self;\n  }\n\n  setPlaceholder() {\n    let placeholder = this.getAttribute('placeholder');\n\n    if (placeholder) {\n      let label = document.createElement('label');\n      label.textContent = this.getAttribute('disabled')\n        ? `${placeholder} disabled`\n        : placeholder;\n\n      this.insertBefore(label, this.firstChild);\n    }\n  }\n\n  setInput() {\n    let attributeSpecs = [\n      {\n        name: 'type',\n        default: 'text',\n        values: [\n          'text',\n          'password',\n          'email',\n        ],\n      },\n      {\n        name: 'placeholder',\n        default: 'undefined',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autocomplete',\n        default: 'off',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'maxlength',\n      },\n      {\n        name: 'pattern',\n      },\n      {\n        name: 'readonly',\n      },\n      {\n        name: 'required',\n      },\n      {\n        name: 'disabled',\n      },\n    ];\n\n    let input = document.createElement('input');\n\n    let attributes = Array\n      .from(this.attributes)\n      .map(getNameAndValue);\n\n    let defaultAttibutes = attributeSpecs\n      .filter(defaults)\n      .filter(notImplemented);\n\n    attributes = attributes.concat(defaultAttibutes);\n\n    attributes.forEach(setAttribute);\n    this.insertBefore(input, this.firstChild);\n\n    function getNameAndValue(attr) {\n      let name = attr.name;\n      let value = attr.value;\n      return {name, value};\n    }\n\n    function defaults(attribute) {\n      return attribute.hasOwnProperty('default');\n    }\n\n    function notImplemented(defaultAttr) {\n      return !attributes.some(attribute => attribute.name === defaultAttr.name);\n    }\n\n    function setAttribute(attribute) {\n      let attributeSpec = attributeSpecs.filter(spec => spec.name === attribute.name)[0];\n      let isDefaultAttribute = attributeSpec && attributeSpec.hasOwnProperty('default');\n      let attributeValue = attribute.value;\n\n      if (isDefaultAttribute) {\n        let isValidValue = attributeSpec.hasOwnProperty('values')\n          && attributeSpec.values.indexOf(attributeValue) >= 0;\n\n        let value = isValidValue\n          ? attributeValue\n          : attributeSpec.default;\n\n        input.setAttribute(attribute.name, value);\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue);\n      }\n    }\n  }\n}\n\ncustomElements.define('mn-input', MnInput);\n"],"sourceRoot":"/source/"}