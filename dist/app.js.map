{"version":3,"sources":["scripts/input.component.js"],"names":["mnInput","setInputAttribute","attribute","hasDefaultValue","hasOwnProperty","hasAttribute","element","getAttribute","name","isValidValue","values","indexOf","value","default","input","setAttribute","this","inputAttributes","document","createElement","map","appendChild","placeholder","label","textContent","prototype","Object","create","HTMLElement","createdCallback","registerElement"],"mappings":"YAIA,SAASA,WA8DP,QAASC,mBAAkBC,WACzB,GAAIC,iBAAkBD,UAAUE,eAAe,WAC3CC,aAAeC,QAAQC,aAAaL,UAAUM,KAElD,IAAIL,gBAAiB,CACnB,GAAIM,cAAeP,UAAUE,eAAe,WACvCF,UAAUQ,OAAOC,QAAQL,QAAQC,aAAaL,UAAUM,QAAU,EAEnEI,MAAQH,aACRH,QAAQC,aAAaL,UAAUM,MAC/BN,UAAUW,OAEdC,OAAMC,aAAab,UAAUM,KAAMI,WAGhC,IAAIP,aAAc,CACrB,GAAIO,QAAQN,QAAQC,aAAaL,UAAUM,KAC3CM,OAAMC,aAAab,UAAUM,KAAMI,SA9EvC,GAAIN,SAAUU,KAEVC,kBAEAT,KAAM,OACNK,QAAS,OACTH,QACE,OACA,WACA,WAIFF,KAAM,cACNK,QAAS,cAGTL,KAAM,UAGNA,KAAM,SAGNA,KAAM,eACNK,QAAS,QAGTL,KAAM,cAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAKNM,MAAQI,SAASC,cAAc,QACnCF,iBAAgBG,IAAInB,mBACpBK,QAAQe,YAAYP,MAGpB,IAAIQ,aAAchB,QAAQC,aAAa,cACvC,IAAIe,YAAa,CACf,GAAIC,OAAQL,SAASC,cAAc,QACnCI,OAAMC,YAAclB,QAAQC,aAAa,YAClCe,YADa,YAEhBA,YACJhB,QAAQe,YAAYE,QA/DxB,GAAIE,WAAYC,OAAOC,OAAOC,YAAYH,UAC1CA,WAAUI,gBAAkB7B,QAC5BkB,SAASY,gBAAgB,YAAaL,UAAAA","file":"app.js","sourcesContent":["let prototype = Object.create(HTMLElement.prototype);\nprototype.createdCallback = mnInput;\ndocument.registerElement('mn-input', {prototype});\n\nfunction mnInput() {\n  let element = this;\n\n  let inputAttributes = [\n    {\n      name: 'type',\n      default: 'text',\n      values: [\n        'text',\n        'password',\n        'email',\n      ],\n    },\n    {\n      name: 'placeholder',\n      default: 'undefined',\n    },\n    {\n      name: 'value',\n    },\n    {\n      name: 'name',\n    },\n    {\n      name: 'autocomplete',\n      default: 'off',\n    },\n    {\n      name: 'autofocus',\n    },\n    {\n      name: 'maxlength',\n    },\n    {\n      name: 'pattern',\n    },\n    {\n      name: 'readonly',\n    },\n    {\n      name: 'required',\n    },\n    {\n      name: 'disabled',\n    },\n  ];\n\n  // input element\n  let input = document.createElement('input');\n  inputAttributes.map(setInputAttribute);\n  element.appendChild(input);\n\n  // label element\n  let placeholder = element.getAttribute('placeholder');\n  if (placeholder) {\n    let label = document.createElement('label');\n    label.textContent = element.getAttribute('disabled')\n      ? `${placeholder} disabled`\n      : placeholder;\n    element.appendChild(label);\n  }\n\n  function setInputAttribute(attribute) {\n    let hasDefaultValue = attribute.hasOwnProperty('default');\n    let hasAttribute = element.getAttribute(attribute.name);\n\n    if (hasDefaultValue) {\n      let isValidValue = attribute.hasOwnProperty('values')\n        && attribute.values.indexOf(element.getAttribute(attribute.name)) >= 0;\n\n      let value = isValidValue\n        ? element.getAttribute(attribute.name)\n        : attribute.default;\n\n      input.setAttribute(attribute.name, value);\n    }\n\n    else if (hasAttribute) {\n      let value = element.getAttribute(attribute.name);\n      input.setAttribute(attribute.name, value);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}